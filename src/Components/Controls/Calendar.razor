@using Humanizer
@using Ical.Net.CalendarComponents
@using Ical.Net.DataTypes
@using NodaTime
@using System.Globalization

@inject Services.CalendarCache calendar

<style>
    .calendar .day {
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid black;
    }

    .calendar .allday {
        /* background-color: #ccc; */
        padding-left: 0.5rem;
        padding-bottom: 0.25rem;
        text-align: center;
    }

        .calendar .allday + .timed {
            padding-top: 0.25rem;
        }

    .calendar .longest {
        font-weight: bold;
        /*         background-color: #ccc;
                            border-radius: 0.5rem;
                     */
    }

    .calendar .timed li {
        padding: 0.25rem;
        display: flex;
    }

    .calendar .timed span:last-of-type {
        flex: 1;
        margin-left: 1rem;
    }

    .calendar hgroup {
        padding-bottom: 0.5rem;
        display: flex;
    }

        .calendar hgroup * {
            flex: 1;
            line-height: 1rem;
            font-size: 1rem;
        }

        .calendar hgroup h4 {
            text-align: right;
            font-weight: normal;
        }

    .calendar li {
        margin: 0;
    }

    .calendar i {
        font-weight: 100;
        opacity: 0.9;
    }
</style>

<ol class="calendar">
    @foreach (var day in Enumerable.Range(0, 7).Select(i => DateTime.Today.AddDays(i)))
    {
        var occurrence = occurrences?.FirstOrDefault(o => o.Key.Date == day.Date);
        <li class="day">
            <hgroup>
                <h3>@day.ToString("dddd", ci)</h3>
                <h4>@day.ToString("dd MMMM, yyyy", ci)</h4>
            </hgroup>
            @{
                var events = occurrence?.Select(e => new
                {
                    Period = e.Period,
                    Event = (e.Source as CalendarEvent)!
                }) ?? [];
                var longest = events.Where(e => e.Event.IsAllDay == false).MaxBy(e => e.Period.Duration);

                var allday = events.Where(e => e.Event.IsAllDay);
            }
            @if (events.Any() == false)
            {
                switch (day.DayOfWeek)
                {
                    case DayOfWeek.Monday:
                    case DayOfWeek.Tuesday:
                    case DayOfWeek.Wednesday:
                    case DayOfWeek.Thursday:
                        <ol class="events timed">
                            <li class="longest">
                                <span>09:00-18:00</span>
                                <span>Büro Schafisheim</span>
                            </li>
                        </ol>
                        break;

                    case DayOfWeek.Friday:
                        <ol class="events allday">
                            <li>
                                <i>Frei</i>
                            </li>
                        </ol>
                        break;

                    case DayOfWeek.Saturday:
                    case DayOfWeek.Sunday:
                        <ol class="events allday">
                            <li>
                                <i>Weekend</i>
                            </li>
                        </ol>
                        break;
                }
            }
            else
            {
                @if (allday.Any())
                {
                    <ol class="events allday">
                        @foreach (var e in allday)
                        {
                            <li>
                                <i>@e.Event.Summary</i>
                            </li>
                        }
                    </ol>
                }
                <ol class="events timed">
                    @if (longest is not null)
                    {
                        <li class="longest">
                            <span>@longest.Period.StartTime.Value.ToLocalTime().ToShortTimeString()-@longest.Period.EndTime.Value.ToLocalTime().ToShortTimeString()</span>
                            <span>@longest.Event.Summary</span>
                        </li>
                    }
                    @foreach (var e in events.Except(allday).Except([longest]))
                    {
                        <li>
                            <span>@e.Period.StartTime.Value.ToLocalTime().ToShortTimeString()-@e.Period.EndTime.Value.ToLocalTime().ToShortTimeString()</span>
                            <span>@e.Event.Summary</span>
                        </li>
                    }
                </ol>
            }
        </li>
    }
</ol>

@code {
    CultureInfo ci = new("en-ca");

    IGrouping<DateTime, Occurrence>[]? occurrences;

    protected override async Task OnInitializedAsync()
    {
        occurrences = await calendar.GetContent();
    }
}
